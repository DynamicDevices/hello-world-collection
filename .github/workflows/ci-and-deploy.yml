name: CI and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to catch broken links
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: read
  issues: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  validate-javascript:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install ESLint
      run: npm install -g eslint
        
    - name: Validate JavaScript syntax
      run: |
        echo "🔍 Validating JavaScript files..."
        
        # Check for syntax errors in all JS files (excluding backup files)
        for file in js/*.js; do
          if [ -f "$file" ] && [[ ! "$file" =~ -backup ]]; then
            echo "Checking $file..."
            node -c "$file" || {
              echo "❌ Syntax error in $file"
              exit 1
            }
            echo "✅ $file - Syntax OK"
          fi
        done
        
        # Check for undefined variables and functions
        echo "🔍 Checking for potential issues..."
        
        # Check app.js for common issues
        if [ -f "js/app.js" ]; then
          echo "Checking app.js for potential issues..."
          
          # Check for undefined functions
          UNDEFINED_FUNCTIONS=$(grep -n "function [a-zA-Z_][a-zA-Z0-9_]*(" js/app.js | cut -d'(' -f1 | cut -d' ' -f2- | sed 's/function //' | while read func; do
            if ! grep -q "function $func(" js/app.js; then
              echo "Potential undefined function: $func"
            fi
          done)
          
          if [ ! -z "$UNDEFINED_FUNCTIONS" ]; then
            echo "⚠️  Potential issues found:"
            echo "$UNDEFINED_FUNCTIONS"
          fi
        fi
        
        echo "✅ JavaScript validation completed successfully"
        
    - name: Check for console errors
      run: |
        echo "🔍 Checking for console.error statements..."
        
        ERROR_COUNT=$(grep -r "console.error" js/ | wc -l || echo "0")
        if [ "$ERROR_COUNT" -gt 0 ]; then
          echo "⚠️  Found $ERROR_COUNT console.error statements:"
          grep -r "console.error" js/ || true
        else
          echo "✅ No console.error statements found"
        fi
        
    - name: Validate HTML structure
      run: |
        echo "🔍 Validating HTML structure..."
        
        # Check if all script tags reference existing files
        for script in $(grep -o 'src="[^"]*"' index.html | sed 's/src="//' | sed 's/"//'); do
          if [[ $script == js/* ]]; then
            file_path=$(echo $script | sed 's/\?.*//')
            if [ ! -f "$file_path" ]; then
              echo "❌ Script file not found: $file_path"
              exit 1
            else
              echo "✅ Script file exists: $file_path"
            fi
          fi
        done
        
        echo "✅ HTML structure validation completed"
        
    - name: Check for common JavaScript issues
      run: |
        echo "🔍 Checking for common JavaScript issues..."
        
        # Check for missing semicolons
        SEMICOLON_ISSUES=$(grep -r "console\." js/ | grep -v ";" | wc -l || echo "0")
        if [ "$SEMICOLON_ISSUES" -gt 0 ]; then
          echo "⚠️  Found potential missing semicolons:"
          grep -r "console\." js/ | grep -v ";" || true
        fi
        
        # Check for undefined variables
        UNDEFINED_VARS=$(grep -r "var [a-zA-Z_][a-zA-Z0-9_]*;" js/ | wc -l || echo "0")
        echo "Found $UNDEFINED_VARS variable declarations"
        
        # Check for function definitions
        FUNCTION_COUNT=$(grep -r "function [a-zA-Z_][a-zA-Z0-9_]*(" js/ | wc -l || echo "0")
        echo "Found $FUNCTION_COUNT function definitions"
        
        echo "✅ Common issues check completed"

  check-duplicate-languages:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Check for duplicate languages
      run: |
        echo "🔍 Checking for duplicate languages..."
        
        # Run the duplicate check using the updated script
        node check-duplicates.js
        
        echo "✅ Duplicate language check completed"

  test-urls:
    needs: [validate-javascript, check-duplicate-languages]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Run URL accessibility tests
      id: url-test
      run: |
        echo "Starting URL tests..."
        node test-urls.js > url-test-output.txt 2>&1
        TEST_EXIT_CODE=$?

        # Extract summary from output
        echo "## 🔗 URL Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        grep -A 10 "📊 SUMMARY" url-test-output.txt >> $GITHUB_STEP_SUMMARY || echo "Summary not found" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

        # Add failed URLs section to summary if any failures exist
        FAILED_URLS=$(grep "❌ Failed:" url-test-output.txt | grep -o '[0-9]\+' | head -1 || echo "0")
        if [ "$FAILED_URLS" -gt "0" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ❌ Failed URLs Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          # Extract failed URLs section with better formatting
          sed -n '/❌ FAILED URLS/,/📄\|$/p' url-test-output.txt | head -50 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Action Required:** Update the failing URLs in \`js/app.js\` baseUrls object" >> $GITHUB_STEP_SUMMARY
        fi

        # Set output variables
        TOTAL_URLS=$(grep "Total URLs tested:" url-test-output.txt | grep -o '[0-9]\+' | head -1 || echo "0")
        SUCCESSFUL_URLS=$(grep "✅ Successful:" url-test-output.txt | grep -o '[0-9]\+' | head -1 || echo "0")

        echo "total_urls=$TOTAL_URLS" >> $GITHUB_OUTPUT
        echo "successful_urls=$SUCCESSFUL_URLS" >> $GITHUB_OUTPUT
        echo "failed_urls=$FAILED_URLS" >> $GITHUB_OUTPUT
        echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT

        # Show full output for debugging
        echo "Full test output:"
        cat url-test-output.txt

        exit $TEST_EXIT_CODE
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: url-test-results-${{ github.run_number }}
        path: |
          url-test-report.json
          url-test-output.txt
        retention-days: 30
        
    - name: Comment on PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let reportContent = '';
          try {
            const output = fs.readFileSync('url-test-output.txt', 'utf8');
            const summaryMatch = output.match(/📊 SUMMARY[\s\S]*?(?=\n==|$)/);
            
            if (summaryMatch) {
              reportContent = `## 🔗 URL Test Results
              
              \`\`\`
              ${summaryMatch[0]}
              \`\`\`
              
              `;
              
              // Add failed URLs if any
              const failedMatch = output.match(/❌ FAILED URLS[\s\S]*?(?=📄|$)/);
              if (failedMatch) {
                reportContent += `
              ### Failed URLs:
              \`\`\`
              ${failedMatch[0]}
              \`\`\`
              `;
              }
            } else {
              reportContent = '## 🔗 URL Test Results\n\nTest completed but summary not found in output.';
            }
            
            reportContent += `\n📄 Full test report available in [workflow artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId}).`;
            
          } catch (error) {
            reportContent = `## 🔗 URL Test Results\n\n❌ Error reading test results: ${error.message}`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: reportContent
          });
          
    - name: Create issue for failed URLs
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const output = fs.readFileSync('url-test-output.txt', 'utf8');
            const failedMatch = output.match(/❌ FAILED URLS[\s\S]*?(?=📄|$)/);
            
            if (failedMatch && failedMatch[0].includes('http')) {
              const issueTitle = `🔗 Broken URLs detected - ${new Date().toISOString().split('T')[0]}`;
              const issueBody = `## Broken URLs Detected
              
              The scheduled URL check has found broken links that need attention:
              
              \`\`\`
              ${failedMatch[0]}
              \`\`\`
              
              ### Action Required:
              - [ ] Review and fix the broken URLs
              - [ ] Update the \`baseUrls\` object in \`js/app.js\`
              - [ ] Test the fixes locally with \`node test-urls.js\`
              
              **Auto-generated by URL testing workflow**
              `;
              
              // Check if similar issue already exists
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'broken-urls'
              });
              
              const existingIssue = issues.find(issue => 
                issue.title.includes('Broken URLs detected') && 
                issue.created_at > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
              );
              
              if (!existingIssue) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: ['broken-urls', 'bug', 'automated']
                });
              }
            }
          } catch (error) {
            console.log('Error creating issue:', error.message);
          }
          
    - name: Set job status
      if: always()
      run: |
        FAILED_URLS="${{ steps.url-test.outputs.failed_urls }}"
        TOTAL_URLS="${{ steps.url-test.outputs.total_urls }}"

        # Set default values if variables are empty
        FAILED_URLS=${FAILED_URLS:-0}
        TOTAL_URLS=${TOTAL_URLS:-0}

        echo "Debug: FAILED_URLS='$FAILED_URLS', TOTAL_URLS='$TOTAL_URLS'"

        if [ "$FAILED_URLS" -gt "0" ]; then
          echo "::warning::Found $FAILED_URLS broken URLs out of $TOTAL_URLS total URLs"
          exit 1
        else
          echo "::notice::All $TOTAL_URLS URLs are accessible"
        fi

  deploy:
    needs: [validate-javascript, check-duplicate-languages, test-urls]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4 